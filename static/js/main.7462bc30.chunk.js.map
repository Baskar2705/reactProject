{"version":3,"sources":["DataFound.js","App.js","serviceWorker.js","index.js","em.svg"],"names":["DataFound","props","Addcondition","masterDivClass","InValueChanges","state","operator","length","alert","push","title","operation","icon","showIconDiv","rightIcon","rightIconValue","readonly","setState","AllowDrop","ev","preventDefault","Drag","dataTransfer","setData","target","id","Drop","src","document","getElementById","getData","srcParent","parentNode","tgt","currentTarget","firstElementChild","replaceChild","appendChild","InputValueChange","bind","localStorage","getItem","storedValue","JSON","parse","this","action","event","index","value","splice","getAttribute","ConditionalOperatorCheck","CreateStorage","setItem","stringify","currentValue","previosValue","querySelectorAll","element","classList","remove","add","StateValue","className","class","href","onClick","aria-hidden","map","item","onDrop","onDragOver","draggable","onDragStart","attr","maxlength","type","key","onChange","name","readOnly","onDoubleClick","empty","alt","Component","App","SetActiveState","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.7462bc30.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport empty from './em.svg';\r\nclass DataFound extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { operator: [] }\r\n        this.InputValueChange = this.InputValueChange.bind(this);\r\n        this.masterDivClass =  '';\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(localStorage.getItem(\"operatorValue\") != null){\r\n            let storedValue = JSON.parse(localStorage.getItem(\"operatorValue\"));\r\n            this.setState({ operator: storedValue });      \r\n        }  \r\n    }\r\n\r\n    InputValueChange(action, event, index, value) {\r\n        var InValueChanges = this.state.operator;\r\n        var source = '';\r\n        switch (action) {\r\n            case 'plusClick':\r\n                InValueChanges[index].showIconDiv = !InValueChanges[index].showIconDiv;\r\n                break;\r\n            case 'rightClickPlus':\r\n            case 'rightClickAction':\r\n                InValueChanges[index].rightIcon = !InValueChanges[index].rightIcon;\r\n                InValueChanges[index].rightIconValue = 'plus';\r\n                break;\r\n            case 'buttonChanges':\r\n                InValueChanges[index].operation = event.target.value == 'and' ? 'or' : 'and';\r\n                break;\r\n            case 'textChanges':\r\n                InValueChanges[index].title = event.target.value;\r\n                break;\r\n            case 'removeItem':\r\n                InValueChanges.splice(index, 1);\r\n                break;\r\n            case 'updateIconValue':\r\n                InValueChanges[index].icon = event.currentTarget.getAttribute('attr');\r\n                InValueChanges[index].showIconDiv = 'false';\r\n                break;\r\n            case 'dbClick':\r\n                InValueChanges[index].readonly = !InValueChanges[index].readonly;\r\n                break;\r\n            case 'rightClickBrack':\r\n                this.ConditionalOperatorCheck(event,index,value);\r\n                InValueChanges[index].rightIconValue = event.currentTarget.getAttribute('attr');\r\n                InValueChanges[index].rightIcon = 'false';\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.setState({ operator: InValueChanges });\r\n        this.CreateStorage(InValueChanges);\r\n    }\r\n\r\n    CreateStorage(value) {\r\n        localStorage.setItem(\"operatorValue\",JSON.stringify(value));\r\n    }\r\n   \r\n    ConditionalOperatorCheck(ev,index,currentValue) {\r\n        let previosValue = document.querySelectorAll('.masterDiv .ButtonDiv button');\r\n        previosValue = previosValue[document.querySelectorAll('.masterDiv .ButtonDiv button').length-2].value;\r\n        var element = document.getElementById(\"drag\"+index);\r\n        element.classList.remove(\"borderbox\");     \r\n        if(currentValue == previosValue){\r\n            element.classList.add(\"borderbox\");     \r\n            this.masterDivClass =  '';\r\n        }else{\r\n            this.masterDivClass =  'borderMainbox';\r\n            element.classList.remove(\"borderbox\");     \r\n        }\r\n    }\r\n\r\n    Addcondition = () => {\r\n        this.masterDivClass =  '';\r\n        var InValueChanges = this.state.operator;\r\n        if(InValueChanges.length>7){\r\n            alert(\"Limit Exceed!! \");\r\n            return true;\r\n        }\r\n        InValueChanges.push({ title: 'New Condtion Name', operation: 'and', icon: 'plus', showIconDiv: true, rightIcon: true, rightIconValue: 'plus', readonly: 'false'});\r\n        this.setState({ operator: InValueChanges });\r\n    }\r\n\r\n    AllowDrop = (ev) => {\r\n        ev.preventDefault();\r\n    }\r\n\r\n    Drag = (ev) => {\r\n        ev.dataTransfer.setData(\"src\", ev.target.id);\r\n    }\r\n\r\n    Drop = (ev) => {\r\n        ev.preventDefault();\r\n        var src = document.getElementById(ev.dataTransfer.getData(\"src\"));\r\n        var srcParent = src.parentNode;\r\n        var tgt = ev.currentTarget.firstElementChild;\r\n        ev.currentTarget.replaceChild(src, tgt);\r\n        srcParent.appendChild(tgt);\r\n    }\r\n\r\n    render() {\r\n        let StateValue = this.state.operator;\r\n        return (\r\n            <div className=\"ButtonClass\">\r\n                {StateValue.length > 0 &&\r\n                    <span class=\"Newcondition\">\r\n                        <a href=\"#\" onClick={this.Addcondition}><i className=\"fa fa-plus\" aria-hidden=\"true\" ></i> New Condition</a><br />\r\n                    </span>\r\n                }\r\n                <div className={this.masterDivClass}>\r\n                {\r\n                    this.state.operator.length > 0 ? this.state.operator.map((item, index) => (\r\n                        <div className=\"masterDiv\">\r\n                            <div id={'div' + index} onDrop={this.Drop} onDragOver={this.AllowDrop}>\r\n                                <div id={'drag' + index} draggable=\"true\" onDragStart={this.Drag} className=\" cls-edit row\">\r\n                                    <div className={item.showIconDiv ? 'col-md-1 paddinClass' : 'col-md-2 paddinClass'}>\r\n                                        <span className={item.showIconDiv ? 'Show' : 'Hide'}>\r\n                                            {item.icon != 'other' ?\r\n                                                <a href=\"#\" onClick={(event) => this.InputValueChange('plusClick', event, index)}><i className={'fa fa-' + item.icon + ' Icon'} aria-hidden=\"true\" ></i></a>\r\n                                                : <a onClick={(event) => this.InputValueChange('plusClick', event, index)} href=\"#\" className=\"Icon\" value=\"other\"> ( </a>\r\n                                            }\r\n                                        </span>\r\n                                        <span className={item.showIconDiv ? 'Hide' : 'Show'}>\r\n                                            <a href=\"#\" onClick={(event) => this.InputValueChange('removeItem', event, index)} ><i id={index} className=\"fa fa-ban Icon \" aria-hidden=\"true\" ></i></a>\r\n                                            <a href=\"#\" attr=\"exclamation\" onClick={(event) => this.InputValueChange('updateIconValue', event, index)} ><i className=\"fa fa-exclamation Icon\" aria-hidden=\"true\" ></i></a>\r\n                                            <a href=\"#\" attr=\"other\" onClick={(event) => this.InputValueChange('updateIconValue', event, index)} className=\"Icon\"> (</a>\r\n                                            <a href=\"#\" attr=\"other\" onClick={(event) => this.InputValueChange('updateIconValue', event, index)} className=\"Icon\"> ( </a>\r\n                                            <a href=\"# \" attr=\"exclamation\" onClick={(event) => this.InputValueChange('updateIconValue', event, index)}><i className=\"fa fa-exclamation Icon\" aria-hidden=\"true\" ></i></a>\r\n                                        </span>\r\n                                    </div>\r\n                                    <div className={item.showIconDiv ? 'col-md-9 mobilesmcenter ' : 'col-md-8 mobilesmcenter'}  >\r\n                                        <input maxlength=\"25\" type=\"text\" id={'inputValue_'+index} key={index} value={item.title} className=\"Input-field \" onChange={(event) => this.InputValueChange('textChanges', event, index)} name=\"data\" readOnly={item.readonly} onDoubleClick={(event) => this.InputValueChange('dbClick', event, index)} />\r\n                                    </div>\r\n                                    <div className=\"col-md-2 text-right mobilesmtwo\">\r\n                                        <span className={item.rightIcon ? 'Show' : 'Hide'}>\r\n                                            {item.rightIconValue != 'other' ?\r\n                                                  <a href=\"#\" onClick={(event) => this.InputValueChange('rightClickPlus', event, index)}><i className={'fa fa-' + item.rightIconValue + ' Icon'} aria-hidden=\"true\" ></i></a>\r\n                                                : <a href=\"#\" onClick={(event) => this.InputValueChange('rightClickPlus', event, index)} className=\"Icon\" value=\"other\"> ) </a>\r\n                                            }\r\n                                        </span>\r\n                                        <span className={item.rightIcon ? 'Hide' : 'Show'}>\r\n                                            <a attr=\"other\" onClick={(event) => this.InputValueChange('rightClickBrack', event, index, item.operation)} href=\"#\" > ) </a>\r\n                                            <a href=\"#\" onClick={(event) => this.InputValueChange('rightClickAction', event, index)} ><i id={index} className=\"fa fa-ban Icon \" aria-hidden=\"true\" ></i></a>\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"ButtonDiv\">\r\n                                <button className=\"btn btn-light BtnWidht\" onClick={(event) => this.InputValueChange('buttonChanges', event, index)} value={item.operation}>{item.operation}</button>\r\n                            </div>\r\n                        </div>\r\n                    )) :\r\n                        <div id=\"artiststhumbnail\">\r\n                            <img src={empty} className=\"Nodata\" alt=\"No Condition\" /><br />\r\n                            <span className=\"\">No Condition</span><br />\r\n                            <a href=\"#\" onClick={this.Addcondition}><i className=\"fa fa-plus\" aria-hidden=\"true\" ></i> New Condition</a>\r\n                        </div>\r\n                }\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\nexport default DataFound;","import React, { Component } from 'react';\nimport './App.css';\nimport DataFound from './DataFound';\n\nclass App extends Component {\n\n  SetActiveState = (event) => {\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <div className=\"container\" >\n        <div className=\"row \">\n          <div className=\"col-sm-3\"></div>\n          <div className=\"col-sm-6 Center\">\n            <div class=\"bgcolor\">\n              <span className=\"paddingLeft\">If node space test <span className=\"TextAlign\"><i className=\"fa fa-close\"></i></span></span>\n              <span className=\"transform \">\n                {/* <span className=\"Ifclass\">if</span> */}\n                <span className=\"\"> If node </span>\n              </span>\n              </div>\n              <div className=\"row FullClass\">\n                <div className=\"col-sm-6 Header Active\" id=\"Condition\" onClick={this.SetActiveState}>Condition </div>\n                <div className=\"col-sm-6 Header \" id=\"Description\" onClick={this.SetActiveState}>Description</div>\n              </div>\n            \n            <DataFound />\n          </div>\n          <div className=\"col-sm-3\"></div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/em.c41f6908.svg\";"],"sourceRoot":""}